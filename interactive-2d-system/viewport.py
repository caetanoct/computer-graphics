# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '2dsystem.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#
# Developed by Caetano Colin Torres
#
# MOVE PX VARIABLE, PEN WIDTH/COLOR VARIABLE, objects list.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QInputDialog, QMainWindow
from input_dialog import Dialog

# transforms real world coordinates into viewport coordinates
def transformXviewport(x_w, Xw_min, Xw_max, Xvp_min, Xvp_max):
    return (((x_w - Xw_min) / (Xw_max - Xw_min)) * (Xvp_max - Xvp_min))

# transforms real world coordinates into viewport coordinates
def transformYviewport(y_w, Yw_min, Yw_max, Yvp_min, Yvp_max):
    return (1-((y_w-Yw_min)/(Yw_max-Yw_min)))* (Yvp_max - Yvp_min)
# data structure that represents the window
class Window():    
    def __init__(self, Xw_min, Yw_min, Xw_max, Yw_max):                
        self.Xw_min = Xw_min
        self.Yw_min = Yw_min
        self.Xw_max = Xw_max
        self.Yw_max = Yw_max
# data structure that represents the viewport
class Viewport_structure():    
    def __init__(self, Xvp_min, Yvp_min, Xvp_max, Yvp_max):                
        self.Xvp_min = Xvp_min
        self.Yvp_min = Yvp_min
        self.Xvp_max = Xvp_max
        self.Yvp_max = Yvp_max
# used to save objects of type point
class Point():
    def __init__(self,x,y):
        self.x = x
        self.y = y
# used to save objects of type line
class Line():
    def __init__(self,x1,y1,x2,y2):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
# used to save objects of type polygon (list of connected points)
class Polygon():
    def __init__(self,pointslist):
        self.connected_points_list = pointslist

# main Graphical User Interface (GUI)
class Ui_MainWindow(QMainWindow):
    
    window = Window(0,0,0,0)
    viewport_obj = Viewport_structure(0,0,0,0)
    objects = []

    def printObjects(self):
        for obj in self.objects:
            if type(obj) == Point:
                print("Found a point")
            if type(obj) == Line:
                print("Found a line")
            if type(obj) == Polygon:
                print("Found a polygon")

    def drawObjects(self):        
        self.actionClearViewport_nonDestructive()
        self.outputTextEdit.setTextColor(QtGui.QColor('green'))
        self.outputTextEdit.setFontItalic(True)
        self.outputTextEdit.append("New Window dimensions:")
        self.outputTextEdit.setFontItalic(False)
        self.outputTextEdit.append("(Xw_min, Yw_min): ({}, {})\n(Xw_max, Yw_max): ({}, {})".format(self.window.Xw_min, self.window.Yw_min, self.window.Xw_max, self.window.Yw_max))        
        self.outputTextEdit.setTextColor(QtGui.QColor('black'))
        for obj in self.objects:
            if type(obj) == Point:
                Xwindow = obj.x
                Ywindow = obj.y                
                Xvp = transformXviewport(Xwindow,self.window.Xw_min,self.window.Xw_max,self.viewport_obj.Xvp_min,self.viewport_obj.Xvp_max)
                Yvp = transformYviewport(Ywindow,self.window.Yw_min,self.window.Yw_max,self.viewport_obj.Yvp_min,self.viewport_obj.Yvp_max)

                self.drawPoint(Xvp,Yvp)
            if type(obj) == Line:
                xw1,yw1,xw2,yw2 = obj.x1,obj.y1,obj.x2,obj.y2
                Xvp1 = transformXviewport(xw1,self.window.Xw_min,self.window.Xw_max,self.viewport_obj.Xvp_min,self.viewport_obj.Xvp_max)
                Yvp1 = transformYviewport(yw1,self.window.Yw_min,self.window.Yw_max,self.viewport_obj.Yvp_min,self.viewport_obj.Yvp_max)
                Xvp2 = transformXviewport(xw2,self.window.Xw_min,self.window.Xw_max,self.viewport_obj.Xvp_min,self.viewport_obj.Xvp_max)
                Yvp2 = transformYviewport(yw2,self.window.Yw_min,self.window.Yw_max,self.viewport_obj.Yvp_min,self.viewport_obj.Yvp_max)
                self.drawLine(Xvp1,Yvp1,Xvp2,Yvp2)
            if type(obj) == Polygon:
                points = obj.connected_points_list
                for i in range(len(points)):
                    # draw line of point[i] with [i+1] mod len(points)        
                    x1 = points[i].x
                    y1 = points[i].y
                    x2 = points[(i+1) % len(points)].x
                    y2 = points[(i+1) % len(points)].y
                    #print("x1,y1:",x1,y1)
                    #print("x2,y2:",x2,y2)

                    Xvp1 = transformXviewport(x1,self.window.Xw_min,self.window.Xw_max,self.viewport_obj.Xvp_min,self.viewport_obj.Xvp_max)
                    Yvp1 = transformYviewport(y1,self.window.Yw_min,self.window.Yw_max,self.viewport_obj.Yvp_min,self.viewport_obj.Yvp_max)

                    Xvp2 = transformXviewport(x2,self.window.Xw_min,self.window.Xw_max,self.viewport_obj.Xvp_min,self.viewport_obj.Xvp_max)
                    Yvp2 = transformYviewport(y2,self.window.Yw_min,self.window.Yw_max,self.viewport_obj.Yvp_min,self.viewport_obj.Yvp_max)        

                    self.drawLine(Xvp1, Yvp1, Xvp2, Yvp2)

        self.viewPortLabel.update()

    def setupUi(self, MainWindow):
    
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(540, 620)        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setObjectName("centralwidget")
        
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 91, 205))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        
        self.interactivemenuTextLabel = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.interactivemenuTextLabel.setObjectName("interactivemenuTextLabel")
        self.verticalLayout.addWidget(self.interactivemenuTextLabel)
        
        self.zoomInButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.zoomInButton.setObjectName("zoomInButton")
        self.zoomInButton.clicked.connect(self.zoomin)
        self.verticalLayout.addWidget(self.zoomInButton)
        
        self.zoomOutButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.zoomOutButton.setObjectName("zoomOutButton")
        self.zoomOutButton.clicked.connect(self.zoomout)
        self.verticalLayout.addWidget(self.zoomOutButton)
        
        self.upButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.upButton.setObjectName("upButton")
        self.upButton.clicked.connect(self.moveup)
        self.verticalLayout.addWidget(self.upButton)
        
        self.downButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.downButton.setObjectName("downButton")
        self.downButton.clicked.connect(self.movedown)
        self.verticalLayout.addWidget(self.downButton)
        
        self.leftButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.leftButton.setObjectName("leftButton")
        self.leftButton.clicked.connect(self.moveleft)
        self.verticalLayout.addWidget(self.leftButton)
        
        self.rightButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.rightButton.setObjectName("rightButton")
        self.rightButton.clicked.connect(self.moveright)
        self.verticalLayout.addWidget(self.rightButton)
        
        self.viewPortLabel = QtWidgets.QLabel(self.centralwidget)
        self.viewPortLabel.setGeometry(QtCore.QRect(120, 30, 400, 400))
        self.viewPortLabel.setMinimumSize(QtCore.QSize(400, 400))
        self.viewPortLabel.setMaximumSize(QtCore.QSize(400, 400))
        self.viewPortLabel.setAutoFillBackground(True)
        self.viewPortLabel.setText("")
        self.viewPortLabel.setObjectName("viewPortLabel")
        
        canvas = QtGui.QPixmap(400, 400)
        canvas.fill(QtGui.QColor('grey'))
        self.viewPortLabel.setPixmap(canvas)

        self.text_viewport_label = QtWidgets.QLabel(self.centralwidget)
        self.text_viewport_label.setGeometry(QtCore.QRect(120, 10, 141, 16))
        self.text_viewport_label.setObjectName("text_viewport_label")
        
        self.outputTextEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.outputTextEdit.setGeometry(QtCore.QRect(10, 440, 511, 130))
        self.outputTextEdit.setReadOnly(True)
        self.outputTextEdit.setObjectName("outputTextEdit")
        
        self.viewport_obj = Viewport_structure(0,0,400,400)
        self.window = Window(0,0,400,400)
        #print(window.Xw_min)
        #print(window.Yw_min)
        #print(window.Xw_max)
        #print(window.Yw_max)
        self.outputTextEdit.setTextColor(QtGui.QColor('green'))
        self.outputTextEdit.setFontItalic(True)
        self.outputTextEdit.append("Window dimensions:")
        self.outputTextEdit.setFontItalic(False)
        self.outputTextEdit.append("(Xw_min, Yw_min): ({}, {})\n(Xw_max, Yw_max): ({}, {})".format(self.window.Xw_min, self.window.Yw_min, self.window.Xw_max, self.window.Yw_max))

        self.outputTextEdit.setTextColor(QtGui.QColor('red'))
        self.outputTextEdit.setFontItalic(True)
        self.outputTextEdit.append("Viewport dimensions (Fixed):")
        self.outputTextEdit.setFontItalic(False)
        self.outputTextEdit.append("(Xvp_min, Yvp_min): ({}, {})\n(Xvp_max, Yvp_max): ({}, {})".format(self.viewport_obj.Xvp_min, self.viewport_obj.Yvp_min, self.viewport_obj.Xvp_max, self.viewport_obj.Yvp_max))
        
        self.outputTextEdit.setTextColor(QtGui.QColor('black'))
        self.outputTextEdit.append("Istructions: Use the Cartesian coordinate system.")

        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 230, 91, 160))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.secondLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.secondLayout.setContentsMargins(0, 0, 0, 0)
        self.secondLayout.setObjectName("secondLayout")
        self.pxAmountLabel = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.pxAmountLabel.setObjectName("pxAmountLabel")
        self.secondLayout.addWidget(self.pxAmountLabel)
        self.pxAmountSpinBox = QtWidgets.QSpinBox(self.verticalLayoutWidget_2)
        self.pxAmountSpinBox.setObjectName("pxAmountSpinBox")
        self.secondLayout.addWidget(self.pxAmountSpinBox)
        self.penWidthLabel = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.penWidthLabel.setObjectName("penWidthLabel")
        self.secondLayout.addWidget(self.penWidthLabel)
        self.penWidthSpinBox = QtWidgets.QSpinBox(self.verticalLayoutWidget_2)
        self.penWidthSpinBox.setObjectName("penWidthSpinBox")
        self.secondLayout.addWidget(self.penWidthSpinBox)
        self.penColorLabel = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.penColorLabel.setObjectName("penColorLabel")
        self.secondLayout.addWidget(self.penColorLabel)
        self.penColorComboBox = QtWidgets.QComboBox(self.verticalLayoutWidget_2)
        self.penColorComboBox.setObjectName("penColorComboBox")
        self.secondLayout.addWidget(self.penColorComboBox)

        MainWindow.setCentralWidget(self.centralwidget)
        
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 495, 22))
        self.menubar.setObjectName("menubar")
        
        self.menuInsert = QtWidgets.QMenu(self.menubar)
        self.menuInsert.setObjectName("menuInsert")
        MainWindow.setMenuBar(self.menubar)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.actiondraw_point = QtWidgets.QAction(MainWindow)
        self.actiondraw_point.setObjectName("actiondraw_point")
        self.actiondraw_point.triggered.connect(self.actionDrawPoint)

        self.actiondraw_line = QtWidgets.QAction(MainWindow)
        self.actiondraw_line.setObjectName("actiondraw_line")
        self.actiondraw_line.triggered.connect(self.actionDrawLine)

        self.actionDraw_Polygon = QtWidgets.QAction(MainWindow)
        self.actionDraw_Polygon.setObjectName("actionDraw_Polygon")
        self.actionDraw_Polygon.triggered.connect(self.actionDrawPolygon)

        self.actionclear = QtWidgets.QAction(MainWindow)
        self.actionclear.setObjectName("actionclear")
        self.actionclear.triggered.connect(self.actionClearViewport)

        self.menuInsert.addAction(self.actiondraw_point)
        self.menuInsert.addAction(self.actiondraw_line)
        self.menuInsert.addAction(self.actionDraw_Polygon)
        self.menuInsert.addAction(self.actionclear)
        
        self.menubar.addAction(self.menuInsert.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # translates ui components
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "INE5420 - Computer Graphics - Basic 2D System"))
        self.interactivemenuTextLabel.setText(_translate("MainWindow", "Menu"))
        self.zoomInButton.setText(_translate("MainWindow", "+"))
        self.zoomOutButton.setText(_translate("MainWindow", "-"))
        self.upButton.setText(_translate("MainWindow", "up"))
        self.downButton.setText(_translate("MainWindow", "down"))
        self.leftButton.setText(_translate("MainWindow", "left"))
        self.rightButton.setText(_translate("MainWindow", "right"))
        self.text_viewport_label.setText(_translate("MainWindow", "Viewport - 400x400"))
        self.menuInsert.setTitle(_translate("MainWindow", "Insert"))
        self.actiondraw_point.setText(_translate("MainWindow", "Draw Point"))
        self.actiondraw_line.setText(_translate("MainWindow", "Draw Line"))
        self.actionclear.setText(_translate("MainWindow", "Clear Viewport"))
        self.pxAmountLabel.setText(_translate("MainWindow", "Px Amount"))
        self.penWidthLabel.setText(_translate("MainWindow", "Pen Width"))
        self.penColorLabel.setText(_translate("MainWindow", "Pen Color"))
        self.actionDraw_Polygon.setText(_translate("MainWindow", "Draw Polygon"))
    
    # Clears the viewport - grey
    def actionClearViewport_nonDestructive(self):        
        painter = QtGui.QPainter(self.viewPortLabel.pixmap())
        pen = QtGui.QPen()
        pen.setWidth(1600)
        pen.setColor(QtGui.QColor('grey'))
        painter.setPen(pen)
        painter.drawPoint(200,200)        
        self.viewPortLabel.update()

    # Clears the viewport - grey
    def actionClearViewport(self):
        self.outputTextEdit.append("Clearing Viewport 400x400.")
        painter = QtGui.QPainter(self.viewPortLabel.pixmap())
        pen = QtGui.QPen()
        pen.setWidth(1600)
        pen.setColor(QtGui.QColor('grey'))
        painter.setPen(pen)
        painter.drawPoint(200,200)
        self.objects = []
        self.viewPortLabel.update()

    # changes window size and redraw objects.
    def zoomin(self):
        self.outputTextEdit.append("Zooming in 5px.")
        self.window.Xw_min += 5
        self.window.Yw_min += 5
        self.window.Xw_max -= 5
        self.window.Yw_max -= 5
        #self.printObjects()
        self.drawObjects()

    # changes window size and redraw objects.
    def zoomout(self):
        self.outputTextEdit.append("Zooming out 5px.")
        self.window.Xw_min -= 5
        self.window.Yw_min -= 5
        self.window.Xw_max += 5
        self.window.Yw_max += 5        
        self.drawObjects()

    # changes window size and redraw objects.
    def moveup(self):
        self.outputTextEdit.append("Moving up 5px.")        
        self.window.Yw_min -= 5        
        self.window.Yw_max -= 5        
        self.drawObjects()

    # changes window size and redraw objects.
    def movedown(self):
        self.outputTextEdit.append("Moving down 5px.")        
        self.window.Yw_min += 5        
        self.window.Yw_max += 5        
        self.drawObjects()

    # changes window size and redraw objects.
    def moveleft(self):
        self.outputTextEdit.append("Moving left 5px.")        
        self.window.Xw_min += 5        
        self.window.Xw_max += 5        
        self.drawObjects()

    # changes window size and redraw objects.
    def moveright(self):
        self.outputTextEdit.append("Moving right 5px.")        
        self.window.Xw_min -= 5        
        self.window.Xw_max -= 5        
        self.drawObjects()


    # when draw line is pressed call draw line function in use dialog data funcion (after receiving dialog input)
    def actionDrawLine(self):
        self.outputTextEdit.append("Draw Line Trigerred, drawing line after user input.")
        dg = Dialog()
        dg.accepted.connect(self.use_dialog_data_line)
        dg.exec_()
        #self.drawLine() - will be executed in use_dialog_data_line
        self.viewPortLabel.update()

    # draws line
    def drawLine(self,x1,y1,x2,y2):
        painter = QtGui.QPainter(self.viewPortLabel.pixmap())
        pen = QtGui.QPen()
        pen.setWidth(5)
        pen.setColor(QtGui.QColor('red'))
        painter.setPen(pen)
        # the display file is x1,y1,x2,y2 - this points represent the object line.
        painter.drawLine(x1, y1, x2,y2)
        painter.end()

    # transforms user input data to viewport coords and calls drawline funtion   
    def use_dialog_data_line(self, values):
        print(values['x1'], values['y1'], values['x2'], values['y2'])
        self.outputTextEdit.append("Values got from user are: (X1: {} ,Y1: {}) (X2: {} ,Y2: {}).".format(values['x1'], values['y1'], values['x2'], values['y2']))
        
        Xvp1 = transformXviewport(int(values['x1']),self.window.Xw_min,self.window.Xw_max,self.viewport_obj.Xvp_min,self.viewport_obj.Xvp_max)
        Yvp1 = transformYviewport(int(values['y1']),self.window.Yw_min,self.window.Yw_max,self.viewport_obj.Yvp_min,self.viewport_obj.Yvp_max)

        Xvp2 = transformXviewport(int(values['x2']),self.window.Xw_min,self.window.Xw_max,self.viewport_obj.Xvp_min,self.viewport_obj.Xvp_max)
        Yvp2 = transformYviewport(int(values['y2']),self.window.Yw_min,self.window.Yw_max,self.viewport_obj.Yvp_min,self.viewport_obj.Yvp_max)

        line = Line(int(values['x1']), int(values['y1']), int(values['x2']), int(values['y2']))
        self.objects.append(line)

        self.drawLine(Xvp1, Yvp1, Xvp2, Yvp2)

    # when action draw point is pressed, get user input, transform it and call drawpoint funtion
    def actionDrawPoint(self):
        self.outputTextEdit.append("Draw Point Trigerred, drawing point after getting values from user.")
        button = self.sender()
        i, okPressed = QInputDialog.getInt(self, "Get integer","x:", 0, -2147483647, 2147483647, 1)
        if okPressed:
            print(i)
        x1 = i
        button = self.sender()
        i, okPressed = QInputDialog.getInt(self, "Get integer","y:", 0, -2147483647, 2147483647, 1)
        if okPressed:
            print(i)
        y1 = i
        # the display file of a point is x1,y1 - they represent the point
        #print("x1:", x1)
        #print(self.window.Xw_min,self.window.Xw_max,self.viewport_obj.Xvp_min,self.viewport_obj.Xvp_max)
        Xvp = transformXviewport(x1,self.window.Xw_min,self.window.Xw_max,self.viewport_obj.Xvp_min,self.viewport_obj.Xvp_max)
        Yvp = transformYviewport(y1,self.window.Yw_min,self.window.Yw_max,self.viewport_obj.Yvp_min,self.viewport_obj.Yvp_max)

        point = Point(x1,y1)
        self.objects.append(point)

        self.drawPoint(Xvp,Yvp)
        self.outputTextEdit.append("Point ({} , {}) was drawn.".format(x1,y1))
        self.viewPortLabel.update()

    # draws a point
    def drawPoint(self,x1,y1):    
        painter = QtGui.QPainter(self.viewPortLabel.pixmap())
        pen = QtGui.QPen()
        pen.setWidth(5)
        pen.setColor(QtGui.QColor('yellow'))
        painter.setPen(pen)
        painter.drawPoint(x1, y1)
        painter.end()

    def actionDrawPolygon(self):
        self.outputTextEdit.append("Draw Polygon Trigerred, drawing polygon after user input.")
        button = self.sender()
        value, okPressed = QInputDialog.getInt(self, "How many points?","amount:", 0, -2147483647, 2147483647, 1)
        if okPressed:
            print("Value received = ", value)    
        amount = value

        points = []

        for x in range(amount):
            button = self.sender()
            i, okPressed = QInputDialog.getInt(self, "Enter value of (Integer)","x{}:".format(x+1), 0, -2147483647, 2147483647, 1)
            if okPressed:
                print(i)
            x1 = i
            button = self.sender()
            i, okPressed = QInputDialog.getInt(self, "Enter value of (Integer)","y{}:".format(x+1), 0, -2147483647, 2147483647, 1)
            if okPressed:
                print(i)
            y1 = i
            point = Point(x1,y1)
            points.append(point)

        for i in range(len(points)):
            # draw line of point[i] with [i+1] mod len(points)        
            x1 = points[i].x
            y1 = points[i].y
            x2 = points[(i+1) % len(points)].x
            y2 = points[(i+1) % len(points)].y
            #print("x1,y1:",x1,y1)
            #print("x2,y2:",x2,y2)

            Xvp1 = transformXviewport(x1,self.window.Xw_min,self.window.Xw_max,self.viewport_obj.Xvp_min,self.viewport_obj.Xvp_max)
            Yvp1 = transformYviewport(y1,self.window.Yw_min,self.window.Yw_max,self.viewport_obj.Yvp_min,self.viewport_obj.Yvp_max)

            Xvp2 = transformXviewport(x2,self.window.Xw_min,self.window.Xw_max,self.viewport_obj.Xvp_min,self.viewport_obj.Xvp_max)
            Yvp2 = transformYviewport(y2,self.window.Yw_min,self.window.Yw_max,self.viewport_obj.Yvp_min,self.viewport_obj.Yvp_max)        

            self.drawLine(Xvp1, Yvp1, Xvp2, Yvp2)

        polygon = Polygon(points)
        self.objects.append(polygon)
        self.viewPortLabel.update()